# Data sources

The plugin supports many different formats of input data (JSON, SVD, RDL), but each one needs to be treated differently.
If you want to import multiple files at once, put them all into a directory (or an archive) and select it, the plugin will search all containers recursively.
You may also load data from a remote archive, to do this put the URL of the archive in one of the Data Sources fields.

## Supported data formats

### SVD

This is the simplest format to use, just select one SVD file (or directory with multiple, as long as they don't collide in the address space) in any of the two "Data Source" file pickers (you may leave one empty), and click analyze.
SVD files don't require a peripheral map (see below) to be provided, as they already contain absolute addresses.

### RDL

In this case you will need two files, an RDL file/files (Data Source 1) and a peripheral map (Data Source 2), as RDL contains just offsets relative to the device binding site.
The peripheral map defines those binding sites and can be obtained from Renode after loading the required platform using the `peripherals export @/some/path/map.json` command.

### Renode RDL

If you want to use Renode generated RDL, you can just tick the `Use Renode RDL` checkbox and specify a peripheral map to use (in any of the two "Data Sources"), as RDL contains just offsets relative to the device binding site and a peripheral map is required to define them.
It can be obtained from Renode after loading the required platform using the `peripherals export @/some/path/map.json` command.

### JSON generated by Renode Model Analyzer

Same as with RDL, select a JSON file/files (or just a [Renode Model Analyzer](https://github.com/antmicro/renode-models-analyzer) generated directory with all the JSONs) in one "Data Source" field, and a peripheral map (it can be obtained from Renode after loading the required platform using the `peripherals export @/some/path/map.json` command) in the other.

## Good to know

- Not providing a peripheral map where it is required will cause the plugin to not bind the peripheral to the address space, but [](types.md) will **still be created and usable**.
- In practice both "Data Sources" are interchangeable, and they are both fed to the same recursive importer. You can, for example, place both the peripheral map and RDL/JSON in a directory and select that directory, leaving the other "Data Source" empty.
  This can be useful if you intend to analyze something multiple times using the same input data.